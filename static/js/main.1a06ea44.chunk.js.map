{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["constructor","props","v4","className","style","title","jsxToString","wrapLines","showLineNumbers","wrapLongLines","language","agate","content","htmlLabelStyle","rawLabelStyle","copyLabelStyle","copyLabel","this","raw","rendered","e","target","navigator","setTimeout","htmlViewer","togglerContainer","toggler","type","name","id","defaultChecked","htmlFor","onClick","displayHtml","displayRaw","copyToClipBoard","delimiter","state","React","App","ReactDOM","render","document","getElementById"],"mappings":"owBAUEA,WAAW,GAAQ,0BACjB,iBAEYC,EAAD,GAAaA,EAAb,GAAwBC,cAHlB,OAKjB,KAAUA,cAEND,EAAJ,QACE,QAAa,yBAAKE,UAAWC,EAAMC,OAAQ,QAA3C,QAGF,MAAWC,IAAYL,EAAvB,UAEA,SAAIA,aACF,MAAW,2BAAX,UAGF,WAAgBA,EAAhB,SAEA,MAAW,uBACTM,WADS,EAETC,iBAFS,EAGTC,eAHS,EAITC,SAJS,WAKTN,MAAOO,SAEN,EAPH,KAUA,QAAa,CACXC,QAASX,EADE,SAEXY,eAAgBT,EAFL,YAGXU,cAAeV,EAHJ,MAIXW,eAAgBX,EAAMY,WAGxB,cAAmB,cAAnB,KAAmB,gBACnB,aAAkB,aAAlB,KAAkB,gBAClB,gBAAqB,gBAArB,KAAqB,gBACrB,kBAAuB,kBAAvB,KAAuB,gBAvCN,E,yDA2CjBC,KAAA,SAAc,CAAEL,QAASK,KAAKC,Q,oCAI9BD,KAAA,SAAc,CAAEL,QAASK,KAAKE,a,oCAGnB,GACXF,KAAA,QAAaG,gBAAb,S,sCAGa,GACbA,YACA,IAAMC,EAASD,EAAf,cAEAC,qBAEAC,8BAA8BL,KAA9BK,WAA6C,WAC3CC,YAAW,WACTF,qBADFE,U,+BAOF,OACE,yBAAKpB,UAAWC,EAAMoB,YACpB,yBAAKrB,UAAWC,EAAMqB,kBACnBR,KADH,MAGE,yBAAKd,UAAWC,EAAMsB,SACpB,2BAAOC,KAAP,QAAoBC,KAAM,gBAAkBX,KAA5C,GAAqDY,GAAI,aAAeZ,KAAxE,GAAiFa,gBAAc,IAE/F,2BAAOC,QAAS,aAAed,KAA/B,GAAwCd,UAAWC,EAAnD,MACE4B,QAASf,KAAKgB,aAJlB,QAOE,2BAAON,KAAP,QAAoBC,KAAM,gBAAkBX,KAA5C,GAAqDY,GAAI,YAAcZ,KAAKY,KAE5E,2BAAOE,QAAS,YAAcd,KAA9B,GAAuCd,UAAWC,EAAlD,MACE4B,QAASf,KAAKiB,YAVlB,QAcE,yBAAK/B,UAAWC,EAAhB,MACE4B,QAASf,KAAKkB,iBAnBtB,UAuBE,yBAAKhC,UAAWC,EAAMgC,YAEtB,yBAAKjC,UAAWC,EAAMQ,SAAUK,KAAKoB,MA1BzC,c,GArEyBC,IAA7B,WCUeC,G,MAbH,WACV,OACE,6BACE,kBAAC,EAAD,KACE,yFAEF,kBAAC,EAAD,KACE,4FCLRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.1a06ea44.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\nimport React from 'react'\nimport jsxToString from 'jsx-to-string'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { agate } from 'react-syntax-highlighter/dist/cjs/styles/hljs'\nimport { v4 } from 'uuid';\n\nimport style from './styles.module.css'\n\nclass HtmlCodeViewer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    const id = (props.id) ? props.id : v4();\n\n    this.id = v4();\n\n    if (props.title) {\n      this.title = <div className={style.title}>{this.props.title}</div>\n    }\n\n    this.str = jsxToString(props.children)\n\n    if (props.language === 'html') {\n      this.str = this.str.replace(/className/g, 'class')\n    }\n\n    this.rendered = props.children\n\n    this.raw = <SyntaxHighlighter\n      wrapLines\n      showLineNumbers\n      wrapLongLines\n      language='htmlbars'\n      style={agate}\n    >\n      {this.str}\n    </SyntaxHighlighter>\n\n    this.state = {\n      content: props.children,\n      htmlLabelStyle: style.labelActive,\n      rawLabelStyle: style.label,\n      copyLabelStyle: style.copyLabel,\n    }\n\n    this.displayHtml = this.displayHtml.bind(this)\n    this.displayRaw = this.displayRaw.bind(this)\n    this.handleChecked = this.handleChecked.bind(this)\n    this.copyToClipBoard = this.copyToClipBoard.bind(this)\n  }\n\n  displayRaw() {\n    this.setState({ content: this.raw })\n  }\n\n  displayHtml() {\n    this.setState({ content: this.rendered })\n  }\n\n  handleChecked(e) {\n    this.display(e.currentTarget.value)\n  }\n\n  copyToClipBoard(e) {\n    e.persist()\n    const target = e.currentTarget;\n\n    target.innerText = \"copied\"\n\n    navigator.clipboard.writeText(this.str).then(() => {\n      setTimeout(() => {\n        target.innerText = \"copy\"\n      }, 500)\n    })\n  }\n\n  render() {\n    return (\n      <div className={style.htmlViewer}>\n        <div className={style.togglerContainer}>\n          {this.title}\n\n          <div className={style.toggler}>\n            <input type=\"radio\" name={\"contentRadio-\" + this.id} id={\"htmlRadio-\" + this.id} defaultChecked />\n\n            <label htmlFor={\"htmlRadio-\" + this.id} className={style.label}\n              onClick={this.displayHtml}\n            >\n              html</label>\n            <input type=\"radio\" name={\"contentRadio-\" + this.id} id={\"rawRadio-\" + this.id} />\n\n            <label htmlFor={\"rawRadio-\" + this.id} className={style.label}\n              onClick={this.displayRaw}\n            >\n              code</label>\n\n            <div className={style.label}\n              onClick={this.copyToClipBoard}\n            >copy</div>\n          </div>\n        </div>\n        <div className={style.delimiter} />\n\n        <div className={style.content}>{this.state.content}</div>\n      </div>\n    )\n  }\n}\n\nexport default HtmlCodeViewer","import React from 'react'\n\nimport HtmlCodeViewer from 'rhcv'\n\nimport 'rhcv/dist/index.css'\n\nconst App = () => {\n  return (\n    <div>\n      <HtmlCodeViewer >\n        <div>This is an example of how react-html-code-viewer works.</div>\n      </HtmlCodeViewer>\n      <HtmlCodeViewer >\n        <div>This is an example of how react-html-code-viewer works.</div>\n      </HtmlCodeViewer>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport 'rhcv/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}