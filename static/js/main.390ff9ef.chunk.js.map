{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["HtmlCodeViewer","jsxToString","props","wrapLines","showLineNumbers","wrapLongLines","language","style","agate","content","children","display","what","this","setState","rendered","raw","handleChecked","e","copyToClipBoard","navigator","target","document","setTimeout","render","className","styles","type","name","id","onChange","value","defaultChecked","htmlFor","onClick","state","React","Component","App","ReactDOM","getElementById"],"mappings":"iaAOMA,Y,QACJ,cAAmB,aACjB,wBAEA,IAAWC,IAAYC,EAAvB,UAEA,SAAIA,aACF,MAAW,2BAAX,UAGF,WAAgBA,EAAhB,SAEA,MAAW,uBACTC,WADS,EAETC,iBAFS,EAGTC,eAHS,EAITC,SAJS,WAKTC,MAAOC,SAEN,EAPH,KAUA,QAAa,CACXC,QAASP,EAAMQ,UAGjB,UAAe,iBAAf,IACA,gBAAqB,uBAArB,IACA,kBAAuB,yBAAvB,IA3BiB,E,kHA8BnBC,oBACEC,eACIC,KAAKC,SAAS,CAAEL,QAASI,KAAKE,WAC9BF,KAAKC,SAAS,CAAEL,QAASI,KAAKG,O,EAGpCC,0BACEJ,KAAA,QAAaK,gBAAb,Q,EAGFC,4BACED,YACAE,8BAA8BP,KAA9BO,WAA6C,WAC3C,IAAMC,EAASC,wBAAf,aACAD,0CACAA,qBAEAE,YAAW,WACTF,eADFE,S,EAOJC,kBACE,OACE,yBAAKC,UAAWC,MAA0Bb,KAAKX,MAAMuB,WACnD,yBAAKA,UAAWC,GACd,yBAAKD,UAAWC,GACd,2BACEC,KADF,QAEEC,KAAMf,KAAKX,MAAM2B,GAFnB,aAGEA,GAAIhB,KAAKX,MAAM2B,GAHjB,YAIEC,SAAUjB,KAJZ,cAKEkB,MALF,WAMEC,gBAAc,IAEhB,2BAAOC,QAASpB,KAAKX,MAAM2B,GAAK,aATlC,QAUE,2BACEF,KADF,QAEEC,KAAMf,KAAKX,MAAM2B,GAFnB,aAGEA,GAAIhB,KAAKX,MAAM2B,GAHjB,OAIEC,SAAUjB,KAJZ,cAKEkB,MAAM,QAGR,2BAAOE,QAASpB,KAAKX,MAAM2B,GAAK,QAlBlC,QAmBE,yBACEJ,UAAWC,EACXQ,QAASrB,KAFX,gBAGEgB,GAAG,aAxBX,UA8BE,yBAAKJ,UAAWC,IAEhB,yBAAKD,UAAWC,GAAiBb,KAAKsB,MAjC1C,W,EAxDEnC,CAAuBoC,IAAMC,WCIpBC,G,OANH,WACV,OAAO,kBAAC,EAAD,KACL,2FCDJC,IAASf,OAAO,kBAAC,EAAD,MAASF,SAASkB,eAAe,U","file":"static/js/main.390ff9ef.chunk.js","sourcesContent":["import React from 'react'\nimport jsxToString from 'jsx-to-string'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { agate } from 'react-syntax-highlighter/dist/cjs/styles/hljs'\n\nimport styles from './styles.module.css'\n\nclass HtmlCodeViewer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.str = jsxToString(props.children)\n\n    if (props.language === 'html') {\n      this.str = this.str.replace(/className/g, 'class')\n    }\n\n    this.rendered = props.children\n\n    this.raw = <SyntaxHighlighter\n      wrapLines\n      showLineNumbers\n      wrapLongLines\n      language='htmlbars'\n      style={agate}\n    >\n      {this.str}\n    </SyntaxHighlighter>\n\n    this.state = {\n      content: props.children\n    }\n\n    this.display = this.display.bind(this)\n    this.handleChecked = this.handleChecked.bind(this)\n    this.copyToClipBoard = this.copyToClipBoard.bind(this)\n  }\n\n  display(what) {\n    what === 'rendered'\n      ? this.setState({ content: this.rendered })\n      : this.setState({ content: this.raw })\n  }\n\n  handleChecked(e) {\n    this.display(e.currentTarget.value)\n  }\n\n  copyToClipBoard(e) {\n    e.persist()\n    navigator.clipboard.writeText(this.str).then(() => {\n      const target = document.getElementById('copyLabel')\n      target.style.backgroundColor = 'rgb(31, 189, 0)'\n      target.style.color = '#fff'\n\n      setTimeout(() => {\n        target.style = null;\n      }, 500)\n\n    })\n  }\n\n  render() {\n    return (\n      <div className={styles.htmlViewer + ' ' + this.props.className}>\n        <div className={styles.togglerContainer}>\n          <div className={styles.toggler}>\n            <input\n              type='radio'\n              name={this.props.id + 'codeToggle'}\n              id={this.props.id + '-rendered'}\n              onChange={this.handleChecked}\n              value='rendered'\n              defaultChecked\n            />\n            <label htmlFor={this.props.id + '-rendered'}>html</label>\n            <input\n              type='radio'\n              name={this.props.id + 'codeToggle'}\n              id={this.props.id + '-raw'}\n              onChange={this.handleChecked}\n              value='raw'\n            />\n\n            <label htmlFor={this.props.id + '-raw'}>code</label>\n            <div\n              className={styles.copyLabel}\n              onClick={this.copyToClipBoard}\n              id='copyLabel'\n            >\n              copy\n          </div>\n          </div>\n        </div >\n        <div className={styles.delimiter} />\n\n        <div className={styles.content}>{this.state.content}</div>\n      </div >\n    )\n  }\n}\n\nexport default HtmlCodeViewer","import React from 'react'\n\nimport HtmlCodeViewer from 'rhcv'\nimport 'rhcv/dist/index.css'\n\nconst App = () => {\n  return <HtmlCodeViewer>\n    <div>This is an example of how react-html-code-viewer works.</div>\n  </HtmlCodeViewer>\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}