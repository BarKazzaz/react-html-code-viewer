{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["constructor","html","raw","copy","copied","column","icon","faColumns","square","faWindowMaximize","v4","props","reactElementToJSXString","id","wrapLines","showLineNumbers","wrapLongLines","language","style","content","label","copyLabel","split","splitIcon","copyIcon","faCopy","key","className","React","ref","onMouseDown","document","onTouchStart","window","e","cont","x","y","xPerc","yPerc","this","container","bar","current","offsetWidth","state","labels","classList","faCheckCircle","navigator","setTimeout","onMouseUp","onTouchEnd","title","onClick","newSplit","faExchangeAlt","copyToClipBoard","options","i","styles","push","value","getCodeViewer","highlighter","active","onChange","App","useState","viewer","setViewer","currentTarget","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.458d8e60.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\nimport React from 'react'\nimport reactElementToJSXString from 'react-element-to-jsx-string'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { agate } from 'react-syntax-highlighter/dist/cjs/styles/hljs'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy, faWindowMaximize } from '@fortawesome/free-regular-svg-icons'\nimport { faColumns, faExchangeAlt, faCheckCircle, faEllipsisV, faEllipsisH } from '@fortawesome/free-solid-svg-icons'\n\nimport { v4 } from 'uuid'\n\nimport style from './styles.module.css'\n\nclass HtmlCodeViewer extends React.Component {\n\n\n\n  constructor(props) {\n\n\n    super(props)\n\n    this.labels = {\n      html: \"html\",\n      raw: \"raw\",\n      copy: \"copy\",\n      copied: \"copied\",\n      column: <FontAwesomeIcon icon={faColumns} />,\n      square: <FontAwesomeIcon icon={faWindowMaximize} />,\n    }\n\n    if (this.props.labels)\n      for (const label in this.props.labels)\n        this.labels[label] = this.props.labels[label]\n\n\n    this.highlighterId = v4()\n\n    this.onChange = (this.props.onChange) ? this.props.onChange : () => { }\n\n    this.style = (this.props.highlighter) ? this.props.highlighter : agate\n\n    this.id = (props.id) ? props.id : v4()\n\n    this.str = reactElementToJSXString(props.children).replace(/{' '}/g, '')\n\n    if (!this.props.active) this.props.active = this.labels.html\n\n    if (props.language === 'html') {\n      this.str = this.str.replace(/className/g, 'class')\n    }\n\n    this.raw = <SyntaxHighlighter\n      id={this.highlighterId}\n      wrapLines\n      showLineNumbers\n      wrapLongLines\n      language='htmlbars'\n      style={this.style}\n    >\n      {this.str}\n    </SyntaxHighlighter>\n\n    this.html = props.children\n\n    this.state = {\n      content: null,\n      label: this.props.active,\n      copyLabel: this.labels.copy,\n      split: this.props.split ? true : false,\n      splitIcon: this.props.split ? this.labels.square : this.labels.column,\n      copyIcon: <FontAwesomeIcon icon={faCopy} />,\n    }\n\n    this.html = <div key={1} id={this.id + '-html'} className={style.content}>{this.html}</div>\n    this.raw = <div key={2} id={this.id + '-raw'} className={style.content}>{this.raw}</div>\n    this.bar = React.createRef();\n\n    this.dragbar = <div ref={this.bar} className={style.dragbar}\n\n      onMouseDown={() => {\n        document.addEventListener('mousemove', this.drag)\n      }}\n\n      onTouchStart={() => {\n        document.addEventListener('touchmove', this.drag)\n      }}\n    >\n\n    </div>\n\n    this.displayHtml = this.displayHtml.bind(this)\n    this.displayRaw = this.displayRaw.bind(this)\n    this.toggle = this.toggle.bind(this)\n    this.drag = this.drag.bind(this)\n    this.copyToClipBoard = this.copyToClipBoard.bind(this)\n    this.container = React.createRef();\n\n  }\n\n  handleWindowResize() {\n\n    window.addEventListener(\"resize\", (e) => {\n\n      const cont = this.container.current;\n\n      const x = e.pageX - cont.offsetLeft;\n      const y = e.pageY - cont.offsetTop;\n\n      const xPerc = x / cont.clientWidth * 100;\n      const yPerc = y / cont.clientHeight * 100;\n\n\n      if (window.innerWidth <= 720) {\n\n        this.container.current.style = {\n          \"display\": \"grid\",\n          \"grid-template-columns\": \"1fr\",\n          \"grid-template-rows\": yPerc - .5 + \"% 1%\" + (100 - yPerc - .5) + \"%\"\n        }\n      } else {\n\n        this.container.current.style = {\n          \"display\": \"grid\",\n          \"grid-template-rows\": \"1fr\",\n          \"grid-template-columns\": xPerc - .5 + \"% 1%\" + (100 - xPerc - .5) + \"%\"\n        }\n      }\n    })\n  }\n\n  drag(e) {\n    const cont = this.container.current;\n    let x;\n    let y;\n    if (e.touches) {\n      x = e.touches[0].pageX - cont.offsetLeft;\n      y = e.touches[0].pageY - cont.offsetTop;\n    }\n    else {\n      x = e.pageX - cont.offsetLeft;\n      y = e.pageY - cont.offsetTop;\n    }\n    \n    const xPerc = x / cont.clientWidth * 100;\n    const yPerc = y / cont.clientHeight * 100;\n\n    document.selection ? document.selection.empty() : window.getSelection().removeAllRanges()\n\n    if (this.bar.current.offsetWidth < this.bar.current.offsetHeight) {\n      cont.style.gridTemplateRows = \"1fr\";\n      cont.style.gridTemplateColumns = xPerc - .75 + \"% .5%\" + (100 - xPerc - .75) + \"%\";\n\n    } else {\n      cont.style.gridTemplateColumns = \"1fr\";\n      cont.style.gridTemplateRows = yPerc - .75 + \"% .5%\" + (100 - yPerc - .75) + \"%\";\n    }\n  }\n\n  toggle() {\n    if (this.state.label === this.labels.raw) {\n      this.displayRaw()\n      this.setState({ label: this.labels.html })\n    }\n\n    else if (this.state.label === this.labels.html) {\n      this.displayHtml()\n      this.setState({ label: this.labels.raw })\n    }\n\n  }\n\n  displayHtml() {\n\n    this.onChange(this.state.label)\n    const classList = this.container.current.classList;\n    if (this.state.split) {\n      classList.add(style.grid);\n      classList.remove(style.block);\n    } else {\n      classList.remove(style.grid);\n      classList.add(style.block);\n    }\n\n    this.setState({ content: this.state.split ? [this.html, this.dragbar, this.raw] : this.html })\n  }\n\n  displayRaw() {\n    this.onChange(this.state.label)\n    const classList = this.container.current.classList;\n    if (this.state.split) {\n      classList.add(style.grid);\n      classList.remove(style.block);\n    } else {\n      classList.remove(style.grid);\n      classList.add(style.block);\n    }\n\n    this.setState({ content: this.state.split ? [this.raw, this.dragbar, this.html] : this.raw })\n  }\n\n  componentDidMount() {\n    this.toggle()\n    this.handleWindowResize()\n  }\n\n  copyToClipBoard(e) {\n\n    this.setState({ copyIcon: <FontAwesomeIcon icon={faCheckCircle} /> })\n\n    navigator.clipboard.writeText(this.str).then(() => {\n      setTimeout(() => {\n        this.setState({ copyIcon: <FontAwesomeIcon icon={faCopy} /> })\n      }, 500)\n    })\n  }\n\n  render() {\n    return (\n      <div className={[style.htmlViewer, style.overflowHidden].join(' ')} id={this.id}\n        onMouseUp={() => {\n          document.removeEventListener('mousemove', this.drag)\n        }}\n        onTouchEnd={() => {\n          document.removeEventListener('touchmove', this.drag)\n        }}>\n\n        <div className={style.togglerContainer} id={this.id + '-togglerContainer'}>\n\n          {this.props.title ? <div className={style.title}>{this.props.title}</div> : null}\n\n          <div className={style.toggler} id={this.id + '-toggler'}>\n\n            <button  \n              onClick={() => {\n                const newSplit = !this.state.split\n                const icon = newSplit ? this.labels.square : this.labels.column;\n\n                this.setState({ split: newSplit, splitIcon: icon }, () => {\n                  (this.state.label === this.labels.html) ? this.displayRaw() : this.displayHtml()\n                })\n              }}\n              className={(this.state.split) ? [style.button, style.label, style.active].join(' ') : style.label}>\n              {this.state.splitIcon}\n            </button>\n\n            <button \n              onClick={this.toggle}\n              className={[style.label, style.button].join(' ')}>\n              <FontAwesomeIcon icon={faExchangeAlt} />\n            </button>\n\n            <button \n              className={(this.state.copying) ? [style.label, style.copying].join(' ') : style.label}\n              onClick={this.copyToClipBoard}>\n              {this.state.copyIcon}\n            </button>\n          </div>\n\n        </div>\n\n        <div ref={this.container} className={style.contentContainer} id={this.id + '-container'}>\n          {this.state.content}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default HtmlCodeViewer","import React, { useState } from 'react'\n\nimport HtmlCodeViewer from 'rhcv'\n\nimport * as styles from 'react-syntax-highlighter/dist/cjs/styles/hljs'\n\nlet options = []\nlet i = 0\nfor (let style in styles) {\n  options.push(<option key={i} value={style}>{style}</option>)\n  i++\n}\n\nfunction getCodeViewer(highlighter) {\n  return <HtmlCodeViewer\n    id=\"htmlViewer\"\n    key={highlighter}\n    highlighter={styles[highlighter]}\n    active=\"raw\"\n    split\n\n    title=\"This is an example of how it works\"\n    onChange={(active) => { }}>\n\n    <div id=\"htmlExample\">\n      <div>\n        This is an example text\n    </div>\n      <div>\n        click on <strong>the frame</strong> to change the view\n    </div>\n      <div>\n        click on <strong>the arrows</strong> to split the view\n    </div>\n      <div>\n        click on <strong>the copy logo</strong> to save code in the clipboard\n    </div>\n      <div>\n        you can resize me, i am responsive :)\n      </div>\n    </div>\n  </HtmlCodeViewer>\n}\n\nconst App = () => {\n\n  const [viewer, setViewer] = useState(getCodeViewer('darcula'))\n\n  return (\n\n    <div className=\"example\">\n      <div className=\"container\">\n        <select className=\"select\" onChange={(e) => { setViewer(getCodeViewer(e.currentTarget.value)) }}>\n          <option>-- pick a highlighter style --</option>\n          {options}\n        </select>\n      </div>\n      <div>\n        {viewer}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport 'rhcv/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}