{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["constructor","console","style","props","v4","className","title","reactElementToJSXString","wrapLines","showLineNumbers","wrapLongLines","language","content","htmlLabelStyle","rawLabelStyle","copyLabelStyle","copyLabel","this","raw","rendered","e","target","navigator","setTimeout","htmlViewer","togglerContainer","toggler","type","name","id","onChange","defaultChecked","htmlIsActive","active","htmlFor","onClick","displayHtml","rawIsActive","displayRaw","copyToClipBoard","state","React","options","i","lastActive","styles","push","key","value","getCodeViewer","highlighter","App","useState","viewer","setViewer","currentTarget","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.026620a1.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\nimport React from 'react'\nimport reactElementToJSXString from 'react-element-to-jsx-string'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { agate } from 'react-syntax-highlighter/dist/cjs/styles/hljs'\n\nimport { v4 } from 'uuid'\n\nimport style from './styles.module.css'\n\nclass HtmlCodeViewer extends React.Component {\n  constructor(props) {\n    super(props)\n\n    console.log(this.props.style)\n    this.onChange = (this.props.onChange) ? this.props.onChange : () => { }\n    this.htmlIsActive = (this.props.active === \"html\") ? style.active : null\n    this.rawIsActive = (this.props.active === \"raw\") ? style.active : null\n    this.style = (this.props.highlighter) ? this.props.highlighter : agate\n\n    if (this.htmlIsActive === null && this.rawIsActive === null) {\n      this.htmlIsActive = style.active\n    }\n\n    this.id = (props.id) ? props.id : v4()\n\n    if (props.title) {\n      this.title = <div className={style.title}>{this.props.title}</div>\n    }\n\n    this.str = reactElementToJSXString(props.children)\n\n    if (props.language === 'html') {\n      this.str = this.str.replace(/className/g, 'class')\n    }\n\n    this.rendered = props.children\n\n    this.raw = <SyntaxHighlighter\n      wrapLines\n      showLineNumbers\n      wrapLongLines\n      language='htmlbars'\n      style={this.style}\n    >\n      {this.str}\n    </SyntaxHighlighter>\n\n    this.state = {\n      content: (props.active === \"raw\") ? this.raw : this.rendered,\n      htmlLabelStyle: style.labelActive,\n      rawLabelStyle: style.label,\n      copyLabelStyle: style.copyLabel,\n    }\n\n    this.displayHtml = this.displayHtml.bind(this)\n    this.displayRaw = this.displayRaw.bind(this)\n    this.handleChecked = this.handleChecked.bind(this)\n    this.copyToClipBoard = this.copyToClipBoard.bind(this)\n  }\n\n  displayRaw() {\n    this.setState({ content: this.raw })\n  }\n\n  displayHtml() {\n    this.setState({ content: this.rendered })\n  }\n\n  handleChecked(e) {\n    this.display(e.currentTarget.value)\n  }\n\n  copyToClipBoard(e) {\n    e.persist()\n    const target = e.currentTarget\n\n    target.innerText = \"copied\"\n\n    navigator.clipboard.writeText(this.str).then(() => {\n      setTimeout(() => {\n        target.innerText = \"copy\"\n      }, 500)\n    })\n  }\n\n  render() {\n    return (\n      <div className={style.htmlViewer}>\n        <div className={style.togglerContainer}>\n          {this.title}\n\n          <div className={style.toggler}>\n            <input type=\"radio\" name={\"contentRadio-\" + this.id} id={\"htmlRadio-\" + this.id} onChange={() => this.onChange('html')} defaultChecked={this.htmlIsActive === style.active} />\n\n            <label htmlFor={\"htmlRadio-\" + this.id} className={style.label + \" \" + this.htmlIsActive}\n              onClick={this.displayHtml}\n            >\n              html</label>\n            <input type=\"radio\" name={\"contentRadio-\" + this.id} id={\"rawRadio-\" + this.id} onChange={() => this.onChange('raw')} defaultChecked={this.rawIsActive === style.active} />\n\n            <label htmlFor={\"rawRadio-\" + this.id} className={style.label + \" \" + this.rawIsActive}\n              onClick={this.displayRaw}\n            >\n              code</label>\n\n            <div className={style.label + ' ' + style.copyLabel}\n              onClick={this.copyToClipBoard}\n            >copy</div>\n          </div>\n        </div>\n\n        <div className={style.content}>{this.state.content}</div>\n      </div>\n    )\n  }\n}\n\nexport default HtmlCodeViewer","import React, { useState } from 'react'\n\nimport HtmlCodeViewer from 'rhcv'\n\nimport 'rhcv/dist/index.css'\n\nimport * as styles from 'react-syntax-highlighter/dist/cjs/styles/hljs'\n\nlet options = []\nlet i = 0\nlet lastActive = \"html\"\nfor (let style in styles) {\n  options.push(<option key={i} value={style}>{style}</option>)\n  i++\n}\n\nfunction getCodeViewer(highlighter) {\n  return <HtmlCodeViewer key={highlighter} highlighter={styles[highlighter]} active={lastActive} title=\"I am a title\" id=\"unique-id\" onChange={(active) => { lastActive = active; }}>\n    <div>\n      This is an example text <br />\n      click on <strong>html</strong> to display rendered html<br />\n      click on <strong>code</strong> to display raw code<br />\n      click on <strong>copy</strong> to save code in the clipboard<br />\n    </div>\n  </HtmlCodeViewer>\n}\n\nconst App = () => {\n\n  const [viewer, setViewer] = useState(getCodeViewer('darcula'))\n\n  return (\n    <div className=\"example\">\n      <div className=\"container\">\n        <select className=\"select\" onChange={(e) => { setViewer(getCodeViewer(e.currentTarget.value)) }}>\n          <option>-- pick a highlighter style --</option>\n          {options}\n        </select>\n      </div>\n      <div>\n        {viewer}\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport 'rhcv/dist/index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}